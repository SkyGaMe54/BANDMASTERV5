---
import '@fontsource/montserrat';
import '@fontsource/roboto';
import TawkChat from '../components/TawkChat.astro';

interface Props {
  title: string;
}

const { title } = Astro.props;

const navigation = [
  { name: 'Accueil', href: '/' },
  { name: 'FonctionnalitÃ©s', href: '/features' },
  { name: 'RÃ©sultats', href: '/results' },
  { name: 'Tarifs', href: '/pricing' },
  { name: 'FAQ', href: '/faq' },
  { 
    name: 'ðŸŽ¯ RÃ©server', 
    href: '/booking',
    special: true 
  }
];
---

<!doctype html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="BandMaster - L'indicateur de trading de confiance" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-primary text-text min-h-screen flex flex-col">
    <header class="border-b border-accent/20 relative z-50">
      <nav class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <a href="/" class="text-2xl font-bold text-accent hover:text-accent-light transition-colors">BandMaster</a>
          
          <!-- Desktop Menu -->
          <div class="hidden md:flex space-x-8">
            {navigation.map(item => (
              <a
                href={item.href}
                class:list={[
                  "transition-colors",
                  item.special 
                    ? "text-accent font-bold hover:text-accent-light relative after:absolute after:bottom-0 after:left-0 after:w-full after:h-0.5 after:bg-accent after:transform after:scale-x-0 hover:after:scale-x-100 after:transition-transform" 
                    : "text-text hover:text-accent"
                ]}
              >
                {item.name}
              </a>
            ))}
          </div>

          <!-- Mobile Menu Button -->
          <button
            id="mobile-menu-button"
            class="md:hidden flex items-center p-2 rounded-lg hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-accent"
            aria-label="Menu"
          >
            <svg
              class="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"
              />
            </svg>
          </button>
        </div>

        <!-- Mobile Menu Panel -->
        <div
          id="mobile-menu"
          class="fixed inset-0 bg-primary/95 backdrop-blur-lg opacity-0 pointer-events-none transition-opacity duration-300 md:hidden"
        >
          <!-- Close Button -->
          <button
            id="close-menu-button"
            class="absolute top-4 right-4 p-2 rounded-full hover:bg-secondary/80 focus:outline-none group transition-colors"
            aria-label="Fermer le menu"
          >
            <div class="relative w-8 h-8">
              <span class="absolute inset-0 flex items-center justify-center">
                <span class="w-6 h-0.5 bg-accent rotate-45 transform transition-transform group-hover:scale-110"></span>
                <span class="w-6 h-0.5 bg-accent -rotate-45 transform transition-transform group-hover:scale-110"></span>
              </span>
            </div>
          </button>

          <!-- Menu Content -->
          <div class="h-full flex flex-col justify-center">
            <div class="container mx-auto px-4">
              <div class="flex flex-col space-y-6">
                {navigation.map(item => (
                  <a
                    href={item.href}
                    class:list={[
                      "text-2xl font-semibold py-3 px-4 rounded-xl transition-colors text-center",
                      item.special 
                        ? "text-accent hover:bg-accent hover:text-primary" 
                        : "hover:bg-secondary/50 hover:text-accent"
                    ]}
                  >
                    {item.name}
                  </a>
                ))}
              </div>
            </div>
          </div>
        </div>
      </nav>
    </header>

    <slot />

    <footer class="mt-auto border-t border-accent/20">
      <div class="container mx-auto px-4 py-8">
        <div class="flex flex-col md:flex-row justify-between items-center">
          <div class="text-muted mb-4 md:mb-0">
            Â© {new Date().getFullYear()} BandMaster. Tous droits rÃ©servÃ©s.
          </div>
          <div class="flex space-x-6">
            {navigation.map(item => (
              <a
                href={item.href}
                class="text-muted hover:text-accent transition-colors"
              >
                {item.name}
              </a>
            ))}
          </div>
        </div>
      </div>
    </footer>

    <TawkChat />
  </body>
</html>

<style is:global>
  :root {
    color-scheme: dark;
  }
  
  html {
    font-family: 'Montserrat', system-ui, sans-serif;
    background: #0a0a0a;
    color: #ffffff;
  }

  body {
    margin: 0;
  }

  body.menu-open {
    overflow: hidden;
  }

  /* Menu Animation */
  #mobile-menu.open {
    opacity: 1;
    pointer-events: auto;
  }
</style>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const closeMenuButton = document.getElementById('close-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const body = document.body;

  function toggleMenu() {
    const isOpen = mobileMenu.classList.contains('open');
    mobileMenu.classList.toggle('open');
    body.classList.toggle('menu-open');
    
    if (!isOpen) {
      // Opening
      mobileMenu.style.display = 'block';
      // Force reflow
      mobileMenu.offsetHeight;
      mobileMenu.classList.add('open');
    } else {
      // Closing
      mobileMenu.classList.remove('open');
      setTimeout(() => {
        if (!mobileMenu.classList.contains('open')) {
          mobileMenu.style.display = 'none';
        }
      }, 300); // Match the duration of the transition
    }
  }

  mobileMenuButton.addEventListener('click', toggleMenu);
  closeMenuButton.addEventListener('click', toggleMenu);

  // Close menu when clicking on a link
  document.querySelectorAll('#mobile-menu a').forEach(link => {
    link.addEventListener('click', toggleMenu);
  });

  // Handle escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && mobileMenu.classList.contains('open')) {
      toggleMenu();
    }
  });
</script>